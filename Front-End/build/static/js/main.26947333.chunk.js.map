{"version":3,"sources":["axios.js","StateProvider.js","SidebarChat.js","Sidebar.js","Chat.js","App.js","serviceWorker.js","reducer.js","index.js"],"names":["instance","axios","create","baseURL","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","SidebarChat","roomName","room","dispatch","useState","currentRoom","setCurrentRoom","onClick","e","type","className","Sidebar","rooms","input","setInput","chatRooms","setChatRooms","newRoom","a","preventDefault","get","then","response","data","map","name","console","log","post","Avatar","src","IconButton","SearchOutlined","onChange","target","placeholder","Chat","messages","sendMessage","message","timestamp","received","roomID","AttachFile","filter","App","setMessages","setRooms","useEffect","channel","Pusher","cluster","subscribe","bind","newMessage","unbind_all","unsubscribe","Boolean","window","location","hostname","match","state","action","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.26947333.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n\tbaseURL: \"https://chat-appserver.herokuapp.com\",\n\n\t//deployed url\n});\n\nexport default instance;\n","import React, { createContext, useContext, useReducer } from \"react\";\n\n// Prepares the dataLayer\nexport const StateContext = createContext();\n\n// Wrap our app and provide the Data layer\nexport const StateProvider = ({ reducer, initialState, children }) => (\n\t<StateContext.Provider value={useReducer(reducer, initialState)}>\n\t\t{children}\n\t</StateContext.Provider>\n);\n\n// Pull information from the data layer\nexport const useStateValue = () => useContext(StateContext);\n","import React, { useState } from \"react\";\nimport \"./SidebarChat.css\";\nimport { Avatar, Button } from \"@material-ui/core\";\nimport { useStateValue } from \"./StateProvider\";\n\nfunction SidebarChat({ roomName }) {\n\tconst [room, dispatch] = useStateValue();\n\n\tconst [currentRoom, setCurrentRoom] = useState(room.room);\n\n\tconst changeRoom = (e) => {\n\t\tsetCurrentRoom(roomName);\n\t\tdispatch({\n\t\t\ttype: \"CHANGE_ROOM\",\n\t\t\troom: currentRoom,\n\t\t});\n\t};\n\n\treturn (\n\t\t<div onClick={changeRoom} className=\"sidebarChat\">\n\t\t\t<form>\n\t\t\t\t{/* <button></button> */}\n\t\t\t\t<div className=\"sidebarChat__info\">\n\t\t\t\t\t<h2>{roomName}</h2>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t</div>\n\t);\n}\nexport default SidebarChat;\n","import React, { useEffect, useState } from \"react\";\nimport \"./Sidebar.css\";\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\nimport ChatIcon from \"@material-ui/icons/Chat\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport { SearchOutlined } from \"@material-ui/icons\";\nimport { Avatar, IconButton } from \"@material-ui/core\";\nimport axios from \"./axios\";\nimport { useStateValue } from \"./StateProvider\";\n\nimport SidebarChat from \"./SidebarChat\";\n\nfunction Sidebar({ rooms }) {\n\tconst [input, setInput] = useState(\"\");\n\tconst [room, dispatch] = useStateValue();\n\tconst [chatRooms, setChatRooms] = useState([]);\n\n\tconst newRoom = async (e) => {\n\t\te.preventDefault();\n\n\t\taxios.get(\"/rooms/sync\").then((response) => {\n\t\t\tsetChatRooms(\n\t\t\t\tresponse.data.map((rooms) => {\n\t\t\t\t\treturn rooms.name;\n\t\t\t\t})\n\t\t\t);\n\t\t\tconsole.log(chatRooms);\n\t\t});\n\n\t\taxios.post(\"/rooms/new\", {\n\t\t\tname: input,\n\n\t\t\t//add room to message collection\n\t\t});\n\t\tsetInput(\"\");\n\t\tdispatch({\n\t\t\ttype: \"CHANGE_ROOM\",\n\t\t\troom: input,\n\t\t});\n\t};\n\n\treturn (\n\t\t<div className=\"sidebar\">\n\t\t\t<div className=\"sidebar__header\">\n\t\t\t\t<Avatar src=\"https://images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com/f/ed991cf4-7c8c-4530-b6ba-a3abf3ab2eae/dcl44cw-02dee5f4-c22d-43ce-99d3-5184ab514e81.png/v1/fill/w_600,h_679,strp/super_mario__yoshi_icon_2d_by_joshuat1306_dcl44cw-fullview.png?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOiIsImlzcyI6InVybjphcHA6Iiwib2JqIjpbW3siaGVpZ2h0IjoiPD02NzkiLCJwYXRoIjoiXC9mXC9lZDk5MWNmNC03YzhjLTQ1MzAtYjZiYS1hM2FiZjNhYjJlYWVcL2RjbDQ0Y3ctMDJkZWU1ZjQtYzIyZC00M2NlLTk5ZDMtNTE4NGFiNTE0ZTgxLnBuZyIsIndpZHRoIjoiPD02MDAifV1dLCJhdWQiOlsidXJuOnNlcnZpY2U6aW1hZ2Uub3BlcmF0aW9ucyJdfQ.ZN4NY6XTNnDkPwE_514KlVEVoUyskzOhG_FaKxGvAwo\" />\n\t\t\t\t<div className=\"sidebar__headerRight\">\n\t\t\t\t\t<IconButton>\n\t\t\t\t\t\t<DonutLargeIcon />\n\t\t\t\t\t</IconButton>\n\t\t\t\t\t<IconButton>\n\t\t\t\t\t\t<ChatIcon />\n\t\t\t\t\t</IconButton>\n\t\t\t\t\t<IconButton>\n\t\t\t\t\t\t<MoreVertIcon />\n\t\t\t\t\t</IconButton>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"sidebar__search\">\n\t\t\t\t<div className=\"sidebar__searchContainer\">\n\t\t\t\t\t<SearchOutlined />\n\n\t\t\t\t\t<form>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tvalue={input}\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tonChange={(e) => setInput(e.target.value)}\n\t\t\t\t\t\t\tplaceholder=\"start a chat\"\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button onClick={newRoom} type=\"submit\">\n\t\t\t\t\t\t\tSend Message\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className=\"sidebar__chats\">\n\t\t\t\t{rooms.map((room) => (\n\t\t\t\t\t<SidebarChat roomName={room.name} />\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Sidebar;\n","import React, { useState } from \"react\";\nimport \"./Chat.css\";\nimport { Avatar, IconButton } from \"@material-ui/core\";\nimport { SearchOutlined, AttachFile, MoreVert } from \"@material-ui/icons\";\nimport InsertEmoticonIcon from \"@material-ui/icons/InsertEmoticon\";\nimport MicIcon from \"@material-ui/icons/Mic\";\nimport axios from \"./axios\";\nimport { useStateValue } from \"./StateProvider\";\n\nfunction Chat({ messages }) {\n\tconst [room, dispatch] = useStateValue();\n\n\tconst [input, setInput] = useState(\"\");\n\n\tconst sendMessage = async (e) => {\n\t\te.preventDefault();\n\n\t\tif (room.room === \"main\") {\n\t\t\taxios.post(\"/messages/new\", {\n\t\t\t\tmessage: input,\n\t\t\t\tname: \"demo app\",\n\t\t\t\ttimestamp: \"Just now\",\n\t\t\t\treceived: false,\n\t\t\t\troomID: room.room,\n\t\t\t\t//add room to message collection\n\t\t\t});\n\t\t} else {\n\t\t\taxios.post(\"/messages/new\", {\n\t\t\t\tmessage: input,\n\t\t\t\tname: \"demo app\",\n\t\t\t\ttimestamp: \"Just now\",\n\t\t\t\treceived: false,\n\t\t\t\troomID: room.room[0],\n\t\t\t});\n\t\t}\n\n\t\tsetInput(\"\");\n\t};\n\treturn (\n\t\t<div className=\"chat\">\n\t\t\t<div className=\"chat__header \">\n\t\t\t\t<Avatar />\n\t\t\t\t<div className=\"chat__headerInfo\">\n\t\t\t\t\t<h3>{room.room}</h3>\n\t\t\t\t\t<p>Last seen...</p>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"chat__headerRight\">\n\t\t\t\t\t<IconButton>\n\t\t\t\t\t\t<SearchOutlined />\n\t\t\t\t\t</IconButton>\n\t\t\t\t\t<IconButton>\n\t\t\t\t\t\t<AttachFile />\n\t\t\t\t\t</IconButton>\n\n\t\t\t\t\t<IconButton>\n\t\t\t\t\t\t<MoreVert />\n\t\t\t\t\t</IconButton>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className=\"chat__body\">\n\t\t\t\t{messages\n\t\t\t\t\t.filter((message) => message.roomID == room.room)\n\t\t\t\t\t.map((message) => (\n\t\t\t\t\t\t<p\n\t\t\t\t\t\t\tclassName={`chat__message ${\n\t\t\t\t\t\t\t\ttrue && message.received && \"chat__receiver\"\n\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span className=\"chat__name\">{message.name}</span>\n\t\t\t\t\t\t\t{message.message} {message.received}\n\t\t\t\t\t\t\t<span className=\"chat__timestamp\">{message.timestamp}</span>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t))}\n\t\t\t</div>\n\n\t\t\t<div className=\"chat__footer\">\n\t\t\t\t<InsertEmoticonIcon />\n\t\t\t\t<form>\n\t\t\t\t\t<input\n\t\t\t\t\t\tvalue={input}\n\t\t\t\t\t\tonChange={(e) => setInput(e.target.value)}\n\t\t\t\t\t\tplaceholder=\"type a messagae\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t/>\n\t\t\t\t\t<button onClick={sendMessage} type=\"submit\">\n\t\t\t\t\t\tSend Message\n\t\t\t\t\t</button>\n\t\t\t\t</form>\n\t\t\t\t<MicIcon />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\nexport default Chat;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Sidebar from \"./Sidebar\";\nimport Chat from \"./Chat\";\nimport Pusher from \"pusher-js\";\nimport axios from \"./axios\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n\tconst [messages, setMessages] = useState([]);\n\tconst [rooms, setRooms] = useState([]);\n\n\t//messages\n\n\tuseEffect(() => {\n\t\taxios.get(\"/messages/sync\").then((response) => {\n\t\t\tsetMessages(response.data);\n\t\t});\n\t}, []);\n\tuseEffect(() => {\n\t\taxios.get(\"/rooms/sync\").then((response) => {\n\t\t\tsetRooms(response.data);\n\t\t});\n\t}, []);\n\n\tuseEffect(() => {\n\t\tconst pusher = new Pusher(\"82a5892951d68fc51aab\", {\n\t\t\tcluster: \"us2\",\n\t\t});\n\n\t\tconst channel = pusher.subscribe(\"messages\");\n\t\tchannel.bind(\"inserted\", (newMessage) => {\n\t\t\tsetMessages([...messages, newMessage]);\n\t\t});\n\n\t\treturn () => {\n\t\t\tchannel.unbind_all();\n\t\t\tchannel.unsubscribe();\n\t\t};\n\t}, [messages]);\n\n\t//rooms\n\n\tuseEffect(() => {\n\t\tconst pusher = new Pusher(\"82a5892951d68fc51aab\", {\n\t\t\tcluster: \"us2\",\n\t\t});\n\n\t\tconst channel = pusher.subscribe(\"rooms\");\n\t\tchannel.bind(\"inserted\", (newRoom) => {\n\t\t\tsetRooms([...rooms, newRoom]);\n\t\t});\n\n\t\treturn () => {\n\t\t\tchannel.unbind_all();\n\t\t\tchannel.unsubscribe();\n\t\t};\n\t}, [rooms]);\n\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<div className=\"app__body\">\n\t\t\t\t{/* <Router>\n\t\t\t\t\t<Switch> */}\n\t\t\t\t<Sidebar rooms={rooms} />\n\t\t\t\t{/* <Route path=\"/rooms/:roomI\"> */}\n\t\t\t\t<Chat messages={messages} />\n\t\t\t\t{/* </Route>\n\t\t\t\t\t\t<Route path=\"/\"> */}\n\t\t\t\t{/* <Chat messages={messages} /> */}\n\t\t\t\t{/* </Route>\n\t\t\t\t\t</Switch>\n\t\t\t\t</Router> */}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const initialState = {\n\troom: \"Initial Chat\",\n};\n\n// Selector\nconst reducer = (state, action) => {\n\tconsole.log(action);\n\tswitch (action.type) {\n\t\tcase \"CHANGE_ROOM\":\n\t\t\treturn {\n\t\t\t\troom: [action.room],\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\nexport default reducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport reducer, { initialState } from \"./reducer\";\nimport { StateProvider } from \"./StateProvider\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<StateProvider initialState={initialState} reducer={reducer}>\n\t\t\t<App />\n\t\t</StateProvider>{\" \"}\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}